<?IncludeModuleLangFile(__FILE__);class MyException extends Exception { }class C_AV_IBlock_Manage {	public $strError = "";	private $ibID;	private $interval = 25;	public $arFilter = Array();	public $arFields2Update = Array();	public $arProps2Update = Array();	public $arPost = Array();	public $allCount = 0;	public $lastID = 0;	public $errorCount = 0;	public $curCount = 0;	public $finish = false;	public $fileName = "";	public $log = "";	private $logDir = "";	// fields for rules	private $arStrFields = Array();	// fields for use in rules	public $arStrFieldsUse = Array();	// fields for where	public $arStrFieldsWhere = Array();	// compare options	public $arCompareOptions = Array();	public function __construct($ibID, $interval) {		try {			// check iblock module			if(!CModule::IncludeModule("iblock"))				throw new MyException(GetMessage("av_ibprops_error_iblock_nf"));			$this->ibID = intval($ibID);			if(!$this->ibID)				throw new MyException(GetMessage("av_ibprops_error_wrong_ibid"));			if(!$this->checkRights())				throw new MyException(GetMessage("av_ibprops_error_no_rights"));			if($interval>0)				$this->interval = $interval;			// check for temp dir			$this->logDir = $_SERVER["DOCUMENT_ROOT"]."/bitrix/tmp/av.ibprops/";			if(!is_dir($this->logDir))				if(!mkdir($this->logDir))					throw new MyException(GetMessage("av_ibprops_error_tmp_dir"));			$this->fileName = "av-iblock-".date("d-m-Y-h-i-s");			$this->arStrFields = Array(						"f_NAME" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_name")),						"f_ACTIVE" => Array("TYPE"=>"L", "NAME"=>GetMessage("av_ibprops_f_active"), "IS_REQUIRED"=>"Y", "VALUES"=>Array("Y"=>"Y", "N"=>"N")),						"f_CODE" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_code"), "TRANSLIT"=>"Y"),						"f_XML_ID" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_xmlid"), "TRANSLIT"=>"Y"),						"f_TAGS" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_tags"))					);			$this->arStrFieldsUse = Array(						"f_ID" => Array("TYPE"=>"N", "NAME"=>GetMessage("av_ibprops_f_id"), "CODE"=>"ID"),						"f_NAME" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_name"), "CODE"=>"NAME"),						"f_CODE" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_code"), "TRANSLIT"=>"Y", "CODE"=>"CODE"),						"f_XML_ID" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_xmlid"), "TRANSLIT"=>"Y", "CODE"=>"XML_ID"),						"f_TAGS" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_tags"), "CODE"=>"TAGS")					);			$this->arStrFieldsWhere = Array(						"f_NAME" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_name"), "DELETE_EQ" => Array("empty", "nempty")),						"f_SECTION_ID" => Array("TYPE"=>"L", "NAME"=>GetMessage("av_ibprops_f_sectionid"), "IS_REQUIRED"=>"Y", "VALUES"=>Array(0=>GetMessage("av_ibprops_f_sectionid_dvalue")), "DELETE_EQ" => Array("like", "nempty")),						"f_ID" => Array("TYPE"=>"N", "NAME"=>GetMessage("av_ibprops_f_id"), "DELETE_EQ" => Array("empty", "like", "nempty")),						"f_ACTIVE" => Array("TYPE"=>"L", "NAME"=>GetMessage("av_ibprops_f_active"), "IS_REQUIRED"=>"Y", "VALUES"=>Array("Y"=>"Y", "N"=>"N"), "DELETE_EQ" => Array("empty", "like", "nempty")),						"f_CODE" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_code")),						"f_XML_ID" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_xmlid")),						"f_TAGS" => Array("TYPE"=>"S", "NAME"=>GetMessage("av_ibprops_f_tags")),					);			$this->arCompareOptions = Array(						"eq" => GetMessage("av_ibprops_c_eq"),						"empty" => GetMessage("av_ibprops_c_empty"),						"nempty" => GetMessage("av_ibprops_c_nempty"),						"like" => GetMessage("av_ibprops_c_like")					);		} catch (Exception $e) {			$this->strError = $e->getMessage();		}	}	// check right for iblock	private function checkRights() {		$rsIBlocks = CIBlock::GetList(array("IBLOCK_TYPE" => "ASC", "NAME" => "ASC"), array("MIN_PERMISSION" => "W", "ID"=>$this->ibID));		if($rsIBlocks->Fetch())			return true;		return false;	}	// get fields and properties	public function getUpdateFields() {		$arTmp = Array();		$rsProps = CIBlock::GetProperties($this->ibID, Array(), Array());		while ($arPropFields = $rsProps->GetNext()) {			if($arPropFields["ACTIVE"] !== "Y")				continue;			// $arPropFields["NAME"] .= " (PROPERTY_".$arPropFields["CODE"].")";			switch($arPropFields["PROPERTY_TYPE"]) {				case "L":					$arValues = Array();					$rs = CIBlockPropertyEnum::GetList(array("SORT" => "ASC"), array("PROPERTY_ID" => $arPropFields["ID"]));					while($ar = $rs->Fetch())						$arValues[$ar["ID"]] = $ar["VALUE"];					$arTmp["p_".$arPropFields["ID"]] = Array("TYPE"=>"L", "VALUES"=>$arValues, "NAME"=>$arPropFields["NAME"], "MULTIPLE"=>$arPropFields["MULTIPLE"], "IS_REQUIRED"=>$arPropFields["IS_REQUIRED"], "DELETE_EQ"=>Array("like"), "CODE"=>$arPropFields["ID"]);					// delete empty and like compare options					// if($arPropFields["IS_REQUIRED"]=="Y")						// $arTmp["p_".$arPropFields["ID"]]["DELETE_EQ"][] = "empty";					break;				case "S":					$arTmp["p_".$arPropFields["ID"]] = Array("TYPE"=>"S", "NAME"=>$arPropFields["NAME"], "MULTIPLE"=>$arPropFields["MULTIPLE"], "IS_REQUIRED"=>$arPropFields["IS_REQUIRED"], "CODE"=>$arPropFields["ID"]);					// delete empty compare options					// if($arPropFields["IS_REQUIRED"]=="Y")						// $arTmp["p_".$arPropFields["ID"]]["DELETE_EQ"] = Array("empty");					break;				case "N":				case "E":				case "U":					$arTmp["p_".$arPropFields["ID"]] = Array("TYPE"=>"N", "NAME"=>$arPropFields["NAME"], "MULTIPLE"=>$arPropFields["MULTIPLE"], "IS_REQUIRED"=>$arPropFields["IS_REQUIRED"], "DELETE_EQ"=>Array("like"), "CODE"=>$arPropFields["ID"]);					// if($arPropFields["IS_REQUIRED"]=="Y")						// $arTmp["p_".$arPropFields["ID"]]["DELETE_EQ"][] = "empty";					break;			}		}		// get sections		$rsSections = CIBlockSection::GetTreeList(array("IBLOCK_ID"=>$this->ibID));		while($arSection = $rsSections->GetNext())			$this->arStrFieldsWhere["f_SECTION_ID"]["VALUES"][$arSection["ID"]] = str_repeat("&nbsp;&nbsp;", intval($arSection["DEPTH_LEVEL"])-1).$arSection["NAME"];		// -----		$this->arStrFieldsUse += $arTmp;		$this->arStrFieldsWhere += $arTmp;		$this->arStrFields += $arTmp;		return $this->arStrFields;	}	// return filtered REQUEST	public function fillPost() {		$arTmp = Array();		foreach($_REQUEST as $k=>$v) {			if((				preg_match("#^[RW][0-9]+$#", $k) &&				is_array($v) &&				in_array(count($v), Array(2,3)) &&				in_array(substr($v['k'],0,2), Array("f_","p_"))			) ||				substr($k, 0, 2)=="is"			)				$arTmp[$k] = $_REQUEST[$k];		}		$this->arPost = $arTmp;		return $this->arPost;	}	// return filter for CIBlockElement::GetList	public function getFilter() {		$this->arFilter = Array();		if($_REQUEST["ALLELEMENTS"]!="Y") {			foreach($this->arPost as $k=>$v) {				// where field (W1, W2 ...)				if(substr($k,0,1)=="W" && isset($this->arStrFieldsWhere[$v['k']])) {					$arF = $this->arStrFieldsWhere[$v['k']];					// check compare option					if((isset($arF["DELETE_EQ"]) && in_array($v['c'], $arF["DELETE_EQ"])) || !array_key_exists($v['c'], $this->arCompareOptions)) {						$this->strError .= GetMessage("av_ibprops_error_compare").$arF["NAME"]."\n";						continue;					}					switch($arF["TYPE"]) {						case "S":							$this->getFilterS($v, $arF);							break;						case "L":							$this->getFilterL($v, $arF);							break;						case "N":							$this->getFilterN($v, $arF);							break;					}				}				// include subsection				if((substr($k, 0, 2)=="is") && ($v=="Y"))					$this->arFilter["INCLUDE_SUBSECTIONS"] = "Y";				//			}			if(empty($this->arFilter))				$this->strError .= GetMessage("av_ibprops_error_empty_filter_fields")."\n";		}		$this->arFilter["IBLOCK_ID"] = $this->ibID;			$s = print_r($this->arFilter, true);			file_put_contents($this->logDir.$this->fileName.".txt", $s, FILE_APPEND);		return $this->arFilter;	}	// get fields to update from POST	public function getFields2Update() {		foreach($this->arPost as $k=>$v) {			// where field (W1, W2 ...)			if(substr($k,0,1)=="R" && isset($this->arStrFields[$v['k']])) {				$key = substr($v['k'],2);				$f_or_p = substr($v['k'],0,2);				if($f_or_p=="f_")					$this->arFields2Update[$key] = $v['v'];				elseif($f_or_p=="p_") {					// allow multiple value					if($this->arStrFields[$v['k']]["MULTIPLE"] == "Y")						$this->arProps2Update[$key][] = $v['v'];					// single value					else						$this->arProps2Update[$key] = $v['v'];				}			}		}		if(empty($this->arFields2Update) && empty($this->arProps2Update))			$this->strError .= GetMessage("av_ibprops_error_empty_rules")."\n";		else {			$s = "\n".GetMessage("av_ibprops_fields")."\n".print_r($this->arFields2Update, true);			$d = "\n".GetMessage("av_ibprops_props")."\n".print_r($this->arProps2Update, true);			file_put_contents($this->logDir.$this->fileName.".txt", $s.$d, FILE_APPEND);		}	}	// update filter on step	// set id in filter >lastID from object	private function UpdateFilter() {		// array of ID		if(is_array($this->arFilter["ID"])) {			foreach($this->arFilter["ID"] as $k=>$v)				if($v<=$this->lastID)					unset($this->arFilter["ID"][$k]);			if(empty($this->arFilter["ID"]))				$this->arFilter["ID"] = false;		// interval		} elseif(is_array($this->arFilter["><ID"])) {			if($this->arFilter["><ID"][1] <= $this->lastID) {				unset($this->arFilter["><ID"]);				$this->arFilter["ID"] = false;			} elseif($this->arFilter["><ID"][0] <= $this->lastID)				$this->arFilter["><ID"][0] = $this->lastID+1;		//		} else {			$this->arFilter[">ID"] = $this->lastID;		}			// TEMP			$s = print_r($this->arFilter, true);			file_put_contents($this->logDir.$this->fileName.".txt", $s, FILE_APPEND);	}	private function getFilterN($arValue, $arParams) {		$key = str_replace(Array("f_","p_"), Array("","PROPERTY_"),$arValue["k"]);		// array, single value or interval		$bInterval = false;		$bError = false;		// array		if(strpos($arValue["v"],",")!==false) {			$value = explode(",", $arValue["v"]);			foreach($value as $k=>$val) {				if(intval($val)>0)					$value[$k] = intval($val);				else					unset($value[$k]);			}			if(empty($value))				$bError = true;			elseif(count($value)==1)				$value = array_shift($value);		}		// interval		elseif(strpos($arValue["v"],"-")!==false) {			$value = explode("-",$arValue["v"]);			if(!(count($value)==2 && intval($value[0]) && intval($value[1]) && intval($value[0])<intval($value[1])))				$bError = true;			$bInterval = true;		}		// single value		elseif(intval($arValue["v"])) {			$value = Array(intval($arValue["v"]));		}		if($bError) {			$this->strError .= GetMessage("av_ibprops_error_filter_value").$arParams["NAME"]."\n";			return;		}		switch($arValue["c"]) {			case "eq":				if($bInterval)					$key = "><".$key;				$this->arFilter[$key] = $value;				break;			case "empty":				$this->arFilter[$key] = false;				break;			case "nempty":				$key = "!".$key;				$this->arFilter[$key] = false;				break;		}	}	private function getFilterS($arValue, $arParams) {		$key = str_replace(Array("f_","p_"), Array("","PROPERTY_"),$arValue["k"]);		$arValue["v"] = trim($arValue["v"]);		if($arValue["v"]=="" && $arValue["c"]=="eq")			$arValue["c"] = "empty";		switch($arValue["c"]) {			case "eq":				$key = "=".$key;				$this->arFilter[$key] = $arValue["v"];				break;			case "empty":				$this->arFilter[$key] = false;				break;			case "nempty":				$key = "!".$key;				$this->arFilter[$key] = false;				break;			case "like":				$key = "%".$key;				$this->arFilter[$key] = $arValue["v"];				break;		}	}	private function getFilterL($arValue, $arParams) {		$key = str_replace(Array("f_","p_"), Array("","PROPERTY_"),$arValue["k"]);		switch($arValue["c"]) {			case "eq":				// value exist in list				if(array_key_exists($arValue["v"], $arParams["VALUES"]))					$this->arFilter[$key] = $arValue["v"];				elseif($arValue["v"]=="empty")					$this->arFilter[$key] = false;				else					$this->strError .= GetMessage("av_ibprops_error_filter_value").$arParams["NAME"]."\n";				break;			case "empty":				$this->arFilter[$key] = false;				break;			case "nempty":				$key = "!".$key."_VALUE";				$this->arFilter[$key] = false;				break;		}	}	public function getElementCount() {		$this->allCount = CIBlockElement::GetList(false, $this->arFilter, Array());		if(!intval($this->allCount))			$this->strError .= GetMessage("av_ibprops_empty_result")."\n";		return $this->allCount;	}	// main function	public function work() {		// last id		// $this->lastID = intval($lID);		$starttime = time();		while(time() - $starttime < $this->interval) {			$this->UpdateFilter();			$tmpcounter = 0;			$rs = CIBlockElement::GetList(Array("ID"=>"asc"), $this->arFilter, false, Array("nTopCount"=>20), Array("IBLOCK_ID", "ID", "NAME", "CODE", "TAGS", "XML_ID", "PROPERTY_*"));			while($obElement = $rs->GetNextElement()) {				$arF = $obElement->getFields();				$arP = $obElement->getProperties();				$this->update($arF, $arP);				// do something				$this->lastID = $arF["ID"];				$this->curCount++;				$tmpcounter++;				// sleep(1);			}			// filter return 0 elements			if($tmpcounter==0) {				$this->finish = true;				file_put_contents($this->logDir.$this->fileName.".txt", $this->log, FILE_APPEND);				return;			}		}	file_put_contents($this->logDir.$this->fileName.".txt", $this->log, FILE_APPEND);	}	// main updater	public function update($arF, $arP) {		// fill array for str_replace		$arReplaceFrom = Array();		$arReplaceTo = Array();		foreach($this->arStrFieldsUse as $fk=>$fv) {			if(substr($fk,0,2)=="f_") {				$arReplaceFrom[] = "#".$fk."#";				$arReplaceTo[] = $arF["~".$fv["CODE"]];			}		}		foreach($arP as $pk=>$pv) {			if(isset($this->arStrFieldsUse["p_".$pv["ID"]])) {				$arReplaceFrom[] = "#p_".$pv["ID"]."#";				if($pv["PROPERTY_TYPE"]=="L")					$arReplaceTo[] = is_array($pv["VALUE_ENUM"]) ? implode($pv["VALUE_ENUM"], ", ") : $pv["VALUE_ENUM"];				else					$arReplaceTo[] = is_array($pv["~VALUE"]) ? implode($pv["~VALUE"], ", ") : $pv["~VALUE"];			}		}		// end of fill		if(!empty($this->arFields2Update)) {			$arTmp = Array();			foreach($this->arFields2Update as $k=>$v) {				$arTmp[$k] = str_replace($arReplaceFrom, $arReplaceTo, $v);				if(isset($this->arStrFields["f_".$k]["TRANSLIT"]) && $this->arStrFields["f_".$k]["TRANSLIT"]=="Y")					$arTmp[$k] = CUtil::Translit($arTmp[$k], "ru");			}			$el = new CIBlockElement;			if(!($res = $el->Update($arF["ID"], $arTmp, false, false, false))) {				$this->log .= GetMessage("av_ibprops_error_update").$arF["ID"]." - ".$el->LAST_ERROR."\n";				$this->errorCount++;			} else				$this->log .= GetMessage("av_ibprops_suc_update").$arF["ID"]."\n";			unset($el);		}		if(!empty($this->arProps2Update)) {			$arTmp = Array();			foreach($this->arProps2Update as $k=>$v) {				if(is_array($v)) {					foreach ($v as $kv => $vv)						$v[$kv] = str_replace($arReplaceFrom, $arReplaceTo, $vv);					$arTmp[$k] = $v;				} else {					$arTmp[$k] = str_replace($arReplaceFrom, $arReplaceTo, $v);				}			}			CIBlockElement::SetPropertyValuesEx($arF["ID"], $this->ibID, $arTmp);		}	}	public static function showError($strError) {		CAdminMessage::ShowMessage($strError);		return "<script>End()</script>\n";	}	public function showResult() {		$str = GetMessage("av_ibprops_result_update").($this->curCount-$this->errorCount).GetMessage("av_ibprops_result_update2").$this->allCount."\n";		if(intval($this->errorCount))			$str .= GetMessage("av_ibprops_result_errors").$this->errorCount."\n";		if($this->finish)			$str .=	GetMessage("av_ibprops_result_finish");		CAdminMessage::ShowNote($str);		if($this->finish && intval($this->errorCount)) {			echo '<small><a target="_blank" href="/bitrix/tmp/av.ibprops/'.$this->fileName.".txt".'">'.GetMessage("av_ibprops_result_log").'</a></small>'."<br />";			echo '<small><a target="_blank" href="/bitrix/tmp/av.ibprops/'.$this->fileName.".tmp".'">'.GetMessage("av_ibprops_result_log_params").'</a></small><br />';			echo '<small>'.GetMessage("av_ibprops_result_log2tp").'</small>';		}		if($this->finish && !intval($this->errorCount))			$this->clearFiles();	}	public function saveParams2File() {		$arSave = Array();		$arSave["arFilter"] = $this->arFilter;		$arSave["arFields2Update"] = $this->arFields2Update;		$arSave["arProps2Update"] = $this->arProps2Update;		$arSave["arStrFields"] = $this->arStrFields;		$arSave["arStrFieldsUse"] = $this->arStrFieldsUse;		$arSave["arStrFieldsWhere"] = $this->arStrFieldsWhere;		if(!file_put_contents($this->logDir.$this->fileName.".tmp", serialize($arSave)))			$this->strError .= GetMessage("av_ibprops_error_write_file")."\n";	}	public function saveParams2Array() {		$arParams = Array();		$arParams["ibID"] = $this->ibID;		$arParams["interval"] = $this->interval;		$arParams["allCount"] = $this->allCount;		$arParams["lastID"] = $this->lastID;		$arParams["curCount"] = $this->curCount;		$arParams["errorCount"] = $this->errorCount;		$arParams["fileName"] = $this->fileName;		return $arParams;	}	public function setParamsFromFile() {		$strFile = file_get_contents($this->logDir.$this->fileName.".tmp");		if(!strlen($strFile)) {			$this->strError .= GetMessage("av_ibprops_error_read_file").$this->fileName."\n";			return;		}		$arSave = unserialize($strFile);		$this->arFilter = $arSave["arFilter"];		$this->arFields2Update = $arSave["arFields2Update"];		$this->arProps2Update = $arSave["arProps2Update"];		$this->arStrFields = $arSave["arStrFields"];		$this->arStrFieldsUse = $arSave["arStrFieldsUse"];		$this->arStrFieldsWhere = $arSave["arStrFieldsWhere"];		if(empty($this->arFilter) || (empty($this->arFields2Update) && empty($this->arProps2Update)) || empty($this->arStrFields) || empty($this->arStrFieldsUse) || empty($this->arStrFieldsWhere))			$this->strError .= GetMessage("av_ibprops_error_read_file").$this->fileName."\n";	}	public function setParamsFromArray($arParams) {		$this->ibID = intval($arParams["ibID"]);		$this->interval = intval($arParams["interval"]);		$this->allCount = intval($arParams["allCount"]);		$this->lastID = intval($arParams["lastID"]);		$this->curCount = intval($arParams["curCount"]);		$this->errorCount = intval($arParams["errorCount"]);		$this->fileName = $arParams["fileName"];	}	public function clearFiles() {		@unlink($this->logDir.$this->fileName.".tmp");		@unlink($this->logDir.$this->fileName.".txt");	}}?>